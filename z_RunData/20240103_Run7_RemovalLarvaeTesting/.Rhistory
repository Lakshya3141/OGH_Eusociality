seq(0, 8, length.out = 100)
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + exp(subset_alpha_data$choice_int[i] * seq(0, 8, length.out = 100)))
)
x = seq(0, 8, length.out = 100)
y = 1 / (1 + exp(0 + 0 * x)
)
library(tidyverse)
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:alpha, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Loop to add logistic curves to the plot
for (i in seq(1:alpha)) {
curve <- data.frame(x = seq(0, 8, length.out = 100),
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * seq(0, 8, length.out = 100)))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
subset_alpha_data$choice_int
subset_alpha_data$choice_int[2]
x = seq(0, 8, length.out = 100)
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x))
y = 1 / (1 + exp(subset_alpha_data$choice_int[0] + subset_alpha_data$choice_int[0] * x))
y = 1 / (1 + exp(subset_alpha_data$choice_int[1] + subset_alpha_data$choice_int[1] * x))
i = 1
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x))
)
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x)))
View(curve)
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
x = seq(0, 8, length.out = 100)
for (i in seq(1:alpha)) {
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x)))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
}
p
hist(subset_alpha_data$choice_int[1:1000])
hist(subset_alpha_data$choice_slope[1:1000])
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Sampled LastOfUs", x = "Dispersal", y = "Count") +
theme_minimal()
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
# Plot a histogram of dispersal values for alpha individuals
pdisp <- ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Sampled LastOfUs", x = "Dispersal", y = "Count") +
theme_minimal()
# Save the plot
ggsave("output/LastOfUs_HistDispersal.png", pdisp, width = 8, height = 6)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/create_ini.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
p1
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/create_ini.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
View(data)
View(data)
library(tidyverse)
library(ggpubr)
library(gridExtra)
data <- read.csv("OutputCSV_*/evolution.csv")
data <- read.csv("OutputCSV_*\evolution.csv")
data <- read.csv("/*/evolution.csv")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
higher mutation v2 CSV file
# Read the higher mutation v2 CSV file
data_last <- read.csv("OutputCSV/LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data_last[data_last$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Create a histogram using ggplot2
histogram <- ggplot(subset_data, aes(x = lifespan)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histogram of Lifespans", x = "Lifespan") +
theme_minimal() +
theme(legend.position = "none") +
geom_vline(xintercept = mean(subset_data$lifespan, na.rm = TRUE), col = "red", lwd = 2) +
annotate("text", x = mean(subset_data$lifespan, na.rm = TRUE), y = 10,
label = paste("Average Lifespan:", round(mean(subset_data$lifespan, na.rm = TRUE), 2)), col = "red")
# Save the plot
ggsave("OutputImages/LastOfUs_HistLifespan.png", plot = histogram)
# Add a line at the average lifespan
avg_lifespan <- mean(subset_data$lifespan, na.rm = TRUE)
# Print average lifespan to the console
cat("Average Lifespan:", round(avg_lifespan, 2), "\n")
# Calculate and print average time per generation
total_gtime <- max(data_last$gtime)
generations_passed <- total_gtime / mean(subset_data$lifespan)
cat(round(generations_passed, 2), " generations done in ", total_gtime, "gtime \n")
# So total number of generations in long model are
evolution_numGen = 100000 / avg_lifespan
cat(evolution_numGen ," generations done in long evolution of 100000 gtime \n")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
alpha <- 200 # In case of just 100 individuals
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:alpha, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Sampled LastOfUs", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none") +
ylim(0, 1.1)
max_larva = 5
x = seq(0, max_larva, length.out = 100)
# Loop to add logistic curves to the plot
for (i in seq(1:alpha)) {
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x)))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
}
# Save the plot
ggsave("OutputImages/LastOfUs_ReactionNorms.png", p, width = 8, height = 6)
# Plot a histogram of dispersal values for alpha individuals
pdisp <- ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Sampled LastOfUs", x = "Dispersal", y = "Count") +
theme_minimal()
# Save the plot
ggsave("OutputImages/LastOfUs_HistDispersal.png", pdisp, width = 8, height = 6)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
p1
p1 <- ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", linewidth = 0.5) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
p1
p1 <- ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", lwd=0.5) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
p1
p1
p1 <- ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = "black", linetype = 2, lwd = 0.5) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
p1
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = "black", linetype = 2, lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = "black", linetype = 2, lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = "black", linetype = 2, lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = "black", lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.2, fill = "blue", lwd = 0) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.2, fill = "blue", lwd = 0.1) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.2, fill = "blue", lwd = 0.1) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.2, fill = "blue", lwd = 1) +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue", color = NA) +  # Remove boundary color
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
ggplot(data, aes(x = gtime, y = dispersal_avg, color = "Dispersal Mean")) +
geom_line() +
geom_ribbon(aes(ymin = dispersal_avg - dispersal_std, ymax = dispersal_avg + dispersal_std), alpha = 0.3, fill = "green") +
labs(title = "Dispersal Average vs. gtime ", x = "gtime", y = "Dispersal Mean") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "green") +
guides(color = guide_legend(title = NULL))
ggplot(data, aes(x = gtime)) +
geom_line(aes(y = num_female, color = "Total Females"), linetype = "solid") +
geom_line(aes(y = num_male, color = "Total Males"), linetype = "dashed") +
labs(title = "Total Females and Males vs. gtime", x = "gtime", y = "Count") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Total Females" = "blue", "Total Males" = "red")) +
guides(color = guide_legend(title = NULL, override.aes = list(linetype = c("solid", "dashed"))))
p6 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = fem_avg, color = "Fem Avg"), linetype = "solid") +
geom_ribbon(aes(ymin = fem_avg - fem_std, ymax = fem_avg + fem_std), alpha = 0.3, fill = "blue") +
geom_line(aes(y = femLarv_avg, color = "FemLarv Avg"), linetype = "dashed") +
geom_ribbon(aes(ymin = femLarv_avg - femLarv_std, ymax = femLarv_avg + femLarv_std), alpha = 0.3, fill = "red") +
geom_line(aes(y = malLarv_avg, color = "MalLarv Avg"), linetype = "dotted") +
geom_ribbon(aes(ymin = malLarv_avg - malLarv_std, ymax = malLarv_avg + malLarv_std), alpha = 0.3, fill = "green") +
labs(title = "Avg and Std Dev of Fem Avg, FemLarv Avg, and MalLarv Avg vs. gtime", x = "gtime", y = "Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Fem Avg" = "blue", "FemLarv Avg" = "red", "MalLarv Avg" = "green")) +
guides(color = guide_legend(title = NULL))
p6
p6 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = fem_avg, color = "Fem Avg"), linetype = "solid") +
geom_line(aes(y = femLarv_avg, color = "FemLarv Avg"), linetype = "solid") +
geom_line(aes(y = malLarv_avg, color = "MalLarv Avg"), linetype = "solid") +
labs(title = "Avg and NestWise Fem Avg, FemLarv Avg, and MalLarv Avg vs. gtime", x = "gtime", y = "Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Fem Avg" = "blue", "FemLarv Avg" = "red", "MalLarv Avg" = "green")) +
guides(color = guide_legend(title = NULL))
p6
View(data)
# Find the total number of unique nest IDs
unique_nest_ids <- unique(data_last$nest_id)
# Randomly sample 100 nest IDs
sampled_nest_ids <- sample(unique_nest_ids, 100)
View(unique_starting_individuals)
# Initialize an empty plot for p7
p7 <- ggplot() +
labs(title = "Nestwise Adult Female Growth of Sampled Nests", x = "gtime", y = "Number of Adult Females") +
theme_minimal() +
theme(legend.position = "none")
# Loop through the sampled nest IDs
for (nest_id in sampled_nest_ids) {
# Subset data for the current nest ID
subset_nest_data <- data_last[data_last$nest_id == nest_id, ]
# Plot num_adults vs gtime for the current nest
p7 <- p7 + geom_line(data = subset_nest_data, aes(x = gtime, y = num_adults, group = factor(nest_id)))
}
p7
# Calculate total number of task switches and their percentage for each individual with more than 10 tasks
unique_individuals <- unique(data_last$ind_id)
# Initialize data frames to store results
task_choice_data <- data.frame(ind_id = numeric(),
total_task_choices = numeric(),
pertime_foraging = numeric(),
perchoice_foraging = numeric())
# Loop through unique individual IDs
for (ind_id in unique_individuals) {
# Subset data for the current individual ID
subset_ind_data <- data_last[data_last$ind_id == ind_id, ]
# Check if the individual has more than 10 tasks
if (nrow(subset_ind_data) > 10) {
# Calculate total number of task switches
total_task_choices <- nrow(subset_ind_data)
# sum(subset_ind_data$current_foraging != subset_ind_data$next_foraging)
# Calculate total time spent foraging (assuming 3.0 for foraging and 4.0 for brooding)
pertime_foraging <- sum(subset_ind_data$current_foraging * 3.0) / sum(subset_ind_data$current_foraging * 3.0 + (1 - subset_ind_data$current_foraging) * 4.0)
# Calculate task foraging percentage
perchoice_foraging <- sum(subset_ind_data$current_foraging)
# Append results to the data frame
task_choice_data <- rbind(task_choice_data,
data.frame(ind_id = ind_id,
total_task_choices = total_task_choices,
pertime_foraging = pertime_foraging,
perchoice_foraging = perchoice_foraging))
}
}
# Create histogram for total time spent foraging
p8 <- ggplot(task_choice_data, aes(x = pertime_foraging)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histogram of Percentage Time Spent Foraging", x = "Total Time Foraging", y = "Count") +
theme_minimal()
p8
ggplot(task_choice_data, aes(x = pertime_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = "Histogram of Percentage Time Spent Foraging", x = "Total Time Foraging", y = "Count") +
theme_minimal()
ggplot(task_choice_data, aes(x = perchoice_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = "Histogram of foraging Choice ratio Foraging", x = "Task Foraging Percentage", y = "Count") +
theme_minimal()
ggplot(task_choice_data, aes(x = pertime_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = "Histogram of Percentage Time Spent Foraging", x = "Total Time Foraging", y = "Count") +
theme_minimal()
# Loop through unique individual IDs
for (ind_id in unique_individuals) {
# Subset data for the current individual ID
subset_ind_data <- data_last[data_last$ind_id == ind_id, ]
# Check if the individual has more than 10 tasks
if (nrow(subset_ind_data) > 10) {
# Calculate total number of task switches
total_task_choices <- nrow(subset_ind_data)
# sum(subset_ind_data$current_foraging != subset_ind_data$next_foraging)
# Calculate total time spent foraging (assuming 3.0 for foraging and 4.0 for brooding)
pertime_foraging <- sum(subset_ind_data$current_foraging * 3.0) / sum(subset_ind_data$current_foraging * 3.0 + (1 - subset_ind_data$current_foraging) * 4.0)
# Calculate task foraging percentage
perchoice_foraging <- sum(subset_ind_data$current_foraging)/nrow(subset_ind_data)
# Append results to the data frame
task_choice_data <- rbind(task_choice_data,
data.frame(ind_id = ind_id,
total_task_choices = total_task_choices,
pertime_foraging = pertime_foraging,
perchoice_foraging = perchoice_foraging))
}
}
# Create histogram for total time spent foraging
p8 <- ggplot(task_choice_data, aes(x = pertime_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = "Histogram of Percentage Time Spent Foraging", x = "Total Time Foraging", y = "Count") +
theme_minimal()
# Save the plot
ggsave("OutputImages/Hist_pertime_foraging.png", p8, width = 8, height = 6)
# Create histogram for task foraging percentage
p9 <- ggplot(task_choice_data, aes(x = perchoice_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = "Histogram of foraging Choice ratio Foraging", x = "Task Foraging Percentage", y = "Count") +
theme_minimal()
# Save the plot
ggsave("OutputImages/Hist_perchoice_foraging.png", p9, width = 8, height = 6)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
set.seed(123)
# Randomly select 4 unique nest IDs
random_nest_ids <- sample(unique(data_last$nest_id), 4)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
plot_group
plot_group$1
plot_group$'1'
# Save the plots in groups of 4
group_num <- 1
for (i in seq(1, length(plot_list), by = 4)) {
group_plots <- plot_list[i:min(i + 3, length(plot_list))]
plot_group <- ggarrange(plotlist = group_plots, ncol = 2)
ggsave(paste("OutputImages/Group_", group_num, ".png", sep = ""), plot_group, width = 12, height = 8)
group_num <- group_num + 1
}
set.seed(123)
# Randomly select 4 unique nest IDs
random_nest_ids <- sample(unique(data_last$nest_id), 4)
# Initialize a list to store plots
plot_list_pertime <- list()
plot_list_perchoice <- list()
# Loop through the randomly selected nest IDs
for (nest_id in random_nest_ids) {
# Subset data for the current nest ID
subset_nest_data <- data_last[data_last$nest_id == nest_id, ]
# Calculate total number of task switches and their percentage for each individual with more than 10 tasks
unique_individuals <- unique(subset_nest_data$ind_id)
# Initialize data frames to store results
task_choice_data <- data.frame(ind_id = numeric(),
total_task_choices = numeric(),
pertime_foraging = numeric(),
perchoice_foraging = numeric())
# Loop through unique individual IDs
for (ind_id in unique_individuals) {
# Subset data for the current individual ID
subset_ind_data <- subset_nest_data[subset_nest_data$ind_id == ind_id, ]
# Check if the individual has more than 10 tasks
if (nrow(subset_ind_data) > 10) {
# Calculate total number of task switches
total_task_choices <- nrow(subset_ind_data)
# Calculate total time spent foraging
pertime_foraging <- sum(subset_ind_data$current_foraging * 3.0) / sum(subset_ind_data$current_foraging * 3.0 + (1 - subset_ind_data$current_foraging) * 4.0)
# Calculate task foraging percentage
perchoice_foraging <- sum(subset_ind_data$current_foraging) / nrow(subset_ind_data)
# Append results to the data frame
task_choice_data <- rbind(task_choice_data,
data.frame(ind_id = ind_id,
total_task_choices = total_task_choices,
pertime_foraging = pertime_foraging,
perchoice_foraging = perchoice_foraging))
}
}
# Create histogram for total time spent foraging
p8 <- ggplot(task_choice_data, aes(x = pertime_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = paste("Nest ID:", nest_id, " - Histogram of Percentage Time Spent Foraging"), x = "Total Time Foraging", y = "Count") +
theme_minimal()
# Save the plot to the list
plot_list_pertime[[paste("Nest", nest_id, sep = "_")]] <- p8
# Create histogram for task foraging percentage
p9 <- ggplot(task_choice_data, aes(x = perchoice_foraging)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(title = paste("Nest ID:", nest_id, " - Histogram of Foraging Choice Ratio"), x = "Task Foraging Percentage", y = "Count") +
theme_minimal()
# Save the plot to the list
plot_list_perchoice[[paste("Nest", nest_id, sep = "_")]] <- p9
}
View(plot_list_pertime)
?ggarange
?ggarrange
ggarrange(plot_list_perchoice)
library(patchwork)
wrap_plots(plot_list_perchoice)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
View(data_last)
View(subset_alpha_data)
View(subset_alpha_data)
length(unique(subset_alpha_data$ind_id))
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
alpha
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
alpha
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_evolution.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/z_RunData/20240103_Run7_RemovalLarvaeTesting/create_ini.R")
