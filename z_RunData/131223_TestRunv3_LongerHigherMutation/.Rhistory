geom_line() +
labs(title = "gtime vs. Events", x = "Events", y = "gtime")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(tidyverse)
data <- read.csv("output_evolution.csv")
# Plot choice_int_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_int_avg)) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3) +
labs(title = "Choice Intercept Average vs. gtime with Std Dev", x = "gtime", y = "Choice Intercept Average")
# Plot choice_slope_avg vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = choice_slope_avg)) +
geom_line() +
geom_ribbon(aes(ymin = choice_slope_avg - choice_slope_std, ymax = choice_slope_avg + choice_slope_std), alpha = 0.3) +
labs(title = "Choice Slope Average vs. gtime with Std Dev", x = "gtime", y = "Choice Slope Average")
# Plot dispersal_mean vs gtime with standard deviation
ggplot(data, aes(x = gtime, y = dispersal_avg)) +
geom_line() +
geom_ribbon(aes(ymin = dispersal_avg - dispersal_std, ymax = dispersal_avg + dispersal_std), alpha = 0.3) +
labs(title = "Dispersal Average vs. gtime with Std Dev", x = "gtime", y = "Dispersal Mean")
# Plot gtime vs events
ggplot(data, aes(x = event, y = gtime)) +
geom_line() +
labs(title = "gtime vs. Events", x = "Events", y = "gtime")
# Plot total females and total males vs gtime
ggplot(data, aes(x = gtime)) +
geom_line(aes(y = num_female), color = "blue", linetype = "solid") +
geom_line(aes(y = num_male), color = "red", linetype = "dashed") +
labs(title = "Total Females and Males vs. gtime", x = "gtime", y = "Count") +
scale_linetype_manual(values = c("solid", "dashed"), name = "Gender")
# Plot fem_avg, femLarv_avg, and malLarv_avg with standard deviations vs gtime
ggplot(data, aes(x = gtime)) +
geom_line(aes(y = fem_avg), color = "blue", linetype = "solid") +
geom_ribbon(aes(ymin = fem_avg - fem_std, ymax = fem_avg + fem_std), alpha = 0.3, fill = "blue") +
geom_line(aes(y = femLarv_avg), color = "red", linetype = "dashed") +
geom_ribbon(aes(ymin = femLarv_avg - femLarv_std, ymax = femLarv_avg + femLarv_std), alpha = 0.3, fill = "red") +
geom_line(aes(y = malLarv_avg), color = "green", linetype = "dotted") +
geom_ribbon(aes(ymin = malLarv_avg - malLarv_std, ymax = malLarv_avg + malLarv_std), alpha = 0.3, fill = "green") +
labs(title = "Avg and Std Dev of Fem Avg, FemLarv Avg, and MalLarv Avg vs. gtime", x = "gtime", y = "Average")
source("~/.active-rstudio-document")
View(create_config)
library(tidyverse)
library(ggpubr)
data <- read.csv("output_evolution.csv")
# Create output folder if not exists
dir.create("output", showWarnings = FALSE)
# Plot choice_int_avg vs gtime with standard deviation
p1 <- ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue") +
labs(title = "Choice Intercept Average vs. gtime with Std Dev", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_slope_avg vs gtime with standard deviation
p2 <- ggplot(data, aes(x = gtime, y = choice_slope_avg, color = "Choice Slope")) +
geom_line() +
geom_ribbon(aes(ymin = choice_slope_avg - choice_slope_std, ymax = choice_slope_avg + choice_slope_std), alpha = 0.3, fill = "red") +
labs(title = "Choice Slope Average vs. gtime with Std Dev", x = "gtime", y = "Choice Slope Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "red") +
guides(color = guide_legend(title = NULL))
p1
p2
# Plot dispersal_mean vs gtime with standard deviation
p3 <- ggplot(data, aes(x = gtime, y = dispersal_avg, color = "Dispersal Mean")) +
geom_line() +
geom_ribbon(aes(ymin = dispersal_avg - dispersal_std, ymax = dispersal_avg + dispersal_std), alpha = 0.3, fill = "green") +
labs(title = "Dispersal Average vs. gtime with Std Dev", x = "gtime", y = "Dispersal Mean") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "green") +
guides(color = guide_legend(title = NULL))
# Plot gtime vs events
p4 <- ggplot(data, aes(x = event, y = gtime)) +
geom_line() +
labs(title = "gtime vs. Events", x = "Events", y = "gtime") +
theme_minimal()
# Plot total females and total males vs gtime
p5 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = num_female, color = "Total Females"), linetype = "solid") +
geom_line(aes(y = num_male, color = "Total Males"), linetype = "dashed") +
labs(title = "Total Females and Males vs. gtime", x = "gtime", y = "Count") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Total Females" = "blue", "Total Males" = "red")) +
guides(color = guide_legend(title = NULL, override.aes = list(linetype = c("solid", "dashed"))))
# Plot fem_avg, femLarv_avg, and malLarv_avg with standard deviations vs gtime
p6 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = fem_avg, color = "Fem Avg"), linetype = "solid") +
geom_ribbon(aes(ymin = fem_avg - fem_std, ymax = fem_avg + fem_std), alpha = 0.3, fill = "blue") +
geom_line(aes(y = femLarv_avg, color = "FemLarv Avg"), linetype = "dashed") +
geom_ribbon(aes(ymin = femLarv_avg - femLarv_std, ymax = femLarv_avg + femLarv_std), alpha = 0.3, fill = "red") +
geom_line(aes(y = malLarv_avg, color = "MalLarv Avg"), linetype = "dotted") +
geom_ribbon(aes(ymin = malLarv_avg - malLarv_std, ymax = malLarv_avg + malLarv_std), alpha = 0.3, fill = "green") +
labs(title = "Avg and Std Dev of Fem Avg, FemLarv Avg, and MalLarv Avg vs. gtime", x = "gtime", y = "Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Fem Avg" = "blue", "FemLarv Avg" = "red", "MalLarv Avg" = "green")) +
guides(color = guide_legend(title = NULL))
# Save individual plots as images in the output folder
ggsave("output/choice_int_avg_plot.png", p1, width = 8, height = 6)
ggsave("output/choice_slope_avg_plot.png", p2, width = 8, height = 6)
ggsave("output/dispersal_mean_plot.png", p3, width = 8, height = 6)
ggsave("output/gtime_vs_events_plot.png", p4, width = 8, height = 6)
ggsave("output/total_females_males_plot.png", p5, width = 8, height = 6)
ggsave("output/fem_femLarv_malLarv_plot.png", p6, width = 8, height = 6)
# # Save all plots in a PDF
# pdf("output/all_plots.pdf", width = 12, height = 8)
# arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
# dev.off()
# Open a PDF file
pdf("output/all_plots.pdf", width = 12, height = 8)
# Print your individual plots (replace p1, p2, p3, ... with your actual plot objects)
print(p1)
print(p2)
print(p3)
# Close the PDF file
dev.off()
# # Save all plots in a PDF
# pdf("output/all_plots.pdf", width = 12, height = 8)
# arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
# dev.off()
# Open a PDF file
pdf("output/all_plots.pdf", width = 12, height = 8)
# Print your individual plots (replace p1, p2, p3, ... with your actual plot objects)
arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
# Close the PDF file
dev.off()
library(gridExtra)
# # Save all plots in a PDF
# pdf("output/all_plots.pdf", width = 12, height = 8)
# arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
# dev.off()
# Open a PDF file
pdf("output/all_plots.pdf", width = 12, height = 8)
# Print your individual plots (replace p1, p2, p3, ... with your actual plot objects)
arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
# Close the PDF file
dev.off()
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
# Read the higher mutation v2 CSV file
data <- read.csv("output_LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data[data$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Plot histogram
hist(subset_data$lifespan, main="Histogram of Lifespans", xlab="Lifespan", col="lightblue", border="black")
View(subset_data)
View(subset_data)
unique(subset_data$lifespan)
as.factor(subset_data$lifespan)
# Read the higher mutation v2 CSV file
data <- read.csv("output_LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data[data$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Plot histogram
hist(subset_data$lifespan, main="Histogram of Lifespans", xlab="Lifespan", col="lightblue", border="black")
# Add a line at the average lifespan
avg_lifespan <- mean(subset_data$lifespan, na.rm = TRUE)
abline(v = avg_lifespan, col="red", lwd=2)
# Print average lifespan on the graph
text(avg_lifespan, 10, labels = paste("Average Lifespan:", round(avg_lifespan, 2)), col="red")
# Print average lifespan to the console
cat("Average Lifespan:", round(avg_lifespan, 2), "\n")
# Calculate and print average time per generation
total_gtime <- max(data$gtime)
generations_passed <- total_gtime / mean(subset_data$lifespan)
cat(round(generations_passed, 2), " generations done in ", total_gtime, "gtime \n")
# So total number of generations in long model are
evolution_numGen = 100000 / avg_lifespan
cat(evolution_numGen ," generations done in long evolutiono of 100000 gtime \n")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data_last[data_last$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Plot histogram
hist_plot <- hist(subset_data$lifespan, main="Histogram of Lifespans", xlab="Lifespan", col="lightblue", border="black")
# Add a line at the average lifespan
avg_lifespan <- mean(subset_data$lifespan, na.rm = TRUE)
abline(v = avg_lifespan, col="red", lwd=2)
# Print average lifespan on the graph
text(avg_lifespan, 10, labels = paste("Average Lifespan:", round(avg_lifespan, 2)), col="red")
# Print average lifespan to the console
cat("Average Lifespan:", round(avg_lifespan, 2), "\n")
# Calculate and print average time per generation
total_gtime <- max(data_last$gtime)
generations_passed <- total_gtime / mean(subset_data$lifespan)
cat(round(generations_passed, 2), " generations done in ", total_gtime, "gtime \n")
# So total number of generations in long model are
evolution_numGen = 100000 / avg_lifespan
cat(evolution_numGen ," generations done in long evolution of 100000 gtime \n")
# Save the histogram plot
png("output/lifespan_histogram.png")
hist_plot
dev.off()
# Find the total number of unique starting individuals
alpha <- max(unique(head(data_last$num_adults[data_last$num_adults > 0], 1000)))
alpha
View(data_last)
View(data_last)
library(tidyverse)
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data_last[data_last$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Plot histogram
hist(subset_data$lifespan, main="Histogram of Lifespans", xlab="Lifespan", col="lightblue", border="black")
# Add a line at the average lifespan
avg_lifespan <- mean(subset_data$lifespan, na.rm = TRUE)
abline(v = avg_lifespan, col="red", lwd=2)
# Print average lifespan on the graph
text(avg_lifespan, 10, labels = paste("Average Lifespan:", round(avg_lifespan, 2)), col="red")
# Print average lifespan to the console
cat("Average Lifespan:", round(avg_lifespan, 2), "\n")
# Calculate and print average time per generation
total_gtime <- max(data_last$gtime)
generations_passed <- total_gtime / mean(subset_data$lifespan)
cat(round(generations_passed, 2), " generations done in ", total_gtime, "gtime \n")
# So total number of generations in long model are
evolution_numGen = 100000 / avg_lifespan
cat(evolution_numGen ," generations done in long evolution of 100000 gtime \n")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1001))
alpha <- unique_starting_individuals$ind_id
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1001, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1001))
alpha <- unique_starting_individuals$ind_id
data_last[1:1000, ]
dummy <- data_last[1:1000, ]
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[data_last$ind_id %in% alpha, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Plot the choice reaction norms for all these hundred individuals
ggplot(subset_alpha_data, aes(x = num_larva, y = 1 / (1 + exp(choice_int + choice_slope * num_larva)))) +
geom_line(aes(group = ind_id, color = as.factor(ind_id))) +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Save the plot
ggsave("output/choice_reaction_norms_plot.png", width = 8, height = 6)
# Plot a histogram of dispersal values for alpha individuals
ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Alpha Individuals", x = "Dispersal", y = "Count") +
theme_minimal()
# Save the plot
ggsave("output/dispersal_histogram_plot.png", width = 8, height = 6)
library(tidyverse)
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Subset data for individuals with t_death != -1
subset_data <- data_last[data_last$t_death != -1, ]
# Calculate lifespan
subset_data$lifespan <- subset_data$t_death - subset_data$t_birth
# Plot histogram
hist(subset_data$lifespan, main="Histogram of Lifespans", xlab="Lifespan", col="lightblue", border="black")
# Add a line at the average lifespan
avg_lifespan <- mean(subset_data$lifespan, na.rm = TRUE)
abline(v = avg_lifespan, col="red", lwd=2)
# Print average lifespan on the graph
text(avg_lifespan, 10, labels = paste("Average Lifespan:", round(avg_lifespan, 2)), col="red")
# Print average lifespan to the console
cat("Average Lifespan:", round(avg_lifespan, 2), "\n")
# Calculate and print average time per generation
total_gtime <- max(data_last$gtime)
generations_passed <- total_gtime / mean(subset_data$lifespan)
cat(round(generations_passed, 2), " generations done in ", total_gtime, "gtime \n")
# So total number of generations in long model are
evolution_numGen = 100000 / avg_lifespan
cat(evolution_numGen ," generations done in long evolution of 100000 gtime \n")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[data_last$ind_id %in% alpha, ]
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:1000, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Plot the choice reaction norms for all these hundred individuals
ggplot(subset_alpha_data, aes(x = num_larva, y = 1 / (1 + exp(choice_int + choice_slope * num_larva)))) +
geom_line(aes(group = ind_id, color = as.factor(ind_id))) +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Plot a histogram of dispersal values for alpha individuals
ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Alpha Individuals", x = "Dispersal", y = "Count") +
theme_minimal()
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:1000, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Loop to add logistic curves to the plot
for (i in alpha) {
curve_data <- subset_alpha_data[subset_alpha_data$ind_id == i, ]
curve <- data.frame(x = seq(0, 8, length.out = 100),
y = 1 / (1 + exp(curve_data$choice_int + curve_data$choice_slope * seq(0, 8, length.out = 100))))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
}
seq(1,alpha)
library(tidyverse)
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:alpha, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Loop to add logistic curves to the plot
for (i in seq(1:alpha)) {
curve <- data.frame(x = seq(0, 8, length.out = 100),
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + exp(subset_alpha_data$choice_int[i] * seq(0, 8, length.out = 100))))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
seq(0, 8, length.out = 100)
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + exp(subset_alpha_data$choice_int[i] * seq(0, 8, length.out = 100)))
)
x = seq(0, 8, length.out = 100)
y = 1 / (1 + exp(0 + 0 * x)
)
library(tidyverse)
# Read the higher mutation v2 CSV file
data_last <- read.csv("output_LastOfUs.csv")
# Find the total number of unique starting individuals
unique_starting_individuals <- data_last[1:1000, ] %>%
distinct(ind_id) %>%
arrange(desc(ind_id)) %>%
slice(which.max(ind_id < 1000))
alpha <- unique_starting_individuals$ind_id + 1
# Take the first alpha rows of output_LastOfUs.csv
subset_alpha_data <- data_last[1:alpha, ]
# Confirm that these have unique ind_ids
stopifnot(length(unique(subset_alpha_data$ind_id)) == nrow(subset_alpha_data))
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
# Loop to add logistic curves to the plot
for (i in seq(1:alpha)) {
curve <- data.frame(x = seq(0, 8, length.out = 100),
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * seq(0, 8, length.out = 100)))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
subset_alpha_data$choice_int
subset_alpha_data$choice_int[2]
x = seq(0, 8, length.out = 100)
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x))
y = 1 / (1 + exp(subset_alpha_data$choice_int[0] + subset_alpha_data$choice_int[0] * x))
y = 1 / (1 + exp(subset_alpha_data$choice_int[1] + subset_alpha_data$choice_int[1] * x))
i = 1
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x))
)
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x)))
View(curve)
# Initialize an empty plot
p <- ggplot() +
labs(title = "Choice Reaction Norms for Alpha Individuals", x = "Number of Larva", y = "Choice Reaction Norm") +
theme_minimal() +
theme(legend.position = "none")
x = seq(0, 8, length.out = 100)
for (i in seq(1:alpha)) {
curve <- data.frame(x = x,
y = 1 / (1 + exp(subset_alpha_data$choice_int[i] + subset_alpha_data$choice_int[i] * x)))
p <- p + geom_line(data = curve, aes(x = x, y = y, group = factor(i)))
}
p
hist(subset_alpha_data$choice_int[1:1000])
hist(subset_alpha_data$choice_slope[1:1000])
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Sampled LastOfUs", x = "Dispersal", y = "Count") +
theme_minimal()
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_LastOfUs.R")
# Plot a histogram of dispersal values for alpha individuals
pdisp <- ggplot(subset_alpha_data, aes(x = dispersal)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Histogram of Dispersal Values for Sampled LastOfUs", x = "Dispersal", y = "Count") +
theme_minimal()
# Save the plot
ggsave("output/LastOfUs_HistDispersal.png", pdisp, width = 8, height = 6)
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/Solitary_clean/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/z_RunData/121223_TestRunv2_LongerFasterMaturation/create_ini.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/z_RunData/121223_TestRunv2_LongerFasterMaturation/analysis_advanced.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/z_RunData/121223_TestRunv2_LongerFasterMaturation/create_ini.R")
source("C:/Users/laksh/Downloads/OGH_Eusociality/z_RunData/121223_TestRunv2_LongerFasterMaturation/create_ini.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
data <- read.csv("output_evolution.csv")
# Create output folder if not exists
dir.create("output", showWarnings = FALSE)
# Plot choice_int_avg vs gtime with standard deviation
p1 <- ggplot(data, aes(x = gtime, y = choice_int_avg, color = "Choice Intercept")) +
geom_line() +
geom_ribbon(aes(ymin = choice_int_avg - choice_int_std, ymax = choice_int_avg + choice_int_std), alpha = 0.3, fill = "blue") +
labs(title = "Choice Intercept Average vs. gtime ", x = "gtime", y = "Choice Intercept Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "blue") +
guides(color = guide_legend(title = NULL))
# Plot choice_slope_avg vs gtime with standard deviation
p2 <- ggplot(data, aes(x = gtime, y = choice_slope_avg, color = "Choice Slope")) +
geom_line() +
geom_ribbon(aes(ymin = choice_slope_avg - choice_slope_std, ymax = choice_slope_avg + choice_slope_std), alpha = 0.3, fill = "red") +
labs(title = "Choice Slope Average vs. gtime ", x = "gtime", y = "Choice Slope Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "red") +
guides(color = guide_legend(title = NULL))
# Plot dispersal_mean vs gtime with standard deviation
p3 <- ggplot(data, aes(x = gtime, y = dispersal_avg, color = "Dispersal Mean")) +
geom_line() +
geom_ribbon(aes(ymin = dispersal_avg - dispersal_std, ymax = dispersal_avg + dispersal_std), alpha = 0.3, fill = "green") +
labs(title = "Dispersal Average vs. gtime ", x = "gtime", y = "Dispersal Mean") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = "green") +
guides(color = guide_legend(title = NULL))
# Plot gtime vs events
p4 <- ggplot(data, aes(x = event, y = gtime)) +
geom_line() +
labs(title = "gtime vs. Events", x = "Events", y = "gtime") +
theme_minimal()
# Plot total females and total males vs gtime
p5 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = num_male, color = "Total Males"), linetype = "dashed") +
geom_line(aes(y = num_female, color = "Total Females"), linetype = "solid") +
labs(title = "Total Females and Males vs. gtime", x = "gtime", y = "Count") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Total Females" = "blue", "Total Males" = "red")) +
guides(color = guide_legend(title = NULL, override.aes = list(linetype = c("solid", "dashed"))))
# Plot fem_avg, femLarv_avg, and malLarv_avg with standard deviations vs gtime
p6 <- ggplot(data, aes(x = gtime)) +
geom_line(aes(y = fem_avg, color = "Fem Avg"), linetype = "solid") +
geom_ribbon(aes(ymin = fem_avg - fem_std, ymax = fem_avg + fem_std), alpha = 0.3, fill = "blue") +
geom_line(aes(y = femLarv_avg, color = "FemLarv Avg"), linetype = "dashed") +
geom_ribbon(aes(ymin = femLarv_avg - femLarv_std, ymax = femLarv_avg + femLarv_std), alpha = 0.3, fill = "red") +
geom_line(aes(y = malLarv_avg, color = "MalLarv Avg"), linetype = "dotted") +
geom_ribbon(aes(ymin = malLarv_avg - malLarv_std, ymax = malLarv_avg + malLarv_std), alpha = 0.3, fill = "green") +
labs(title = "Avg and Std Dev of Fem Avg, FemLarv Avg, and MalLarv Avg vs. gtime", x = "gtime", y = "Average") +
theme_minimal() +
theme(legend.position="top") +
scale_color_manual(values = c("Fem Avg" = "blue", "FemLarv Avg" = "red", "MalLarv Avg" = "green")) +
guides(color = guide_legend(title = NULL))
# Save individual plots as images in the output folder
ggsave("output/evolution_choiceIntercept.png", p1, width = 8, height = 6)
ggsave("output/evolution_choiceSlope.png", p2, width = 8, height = 6)
ggsave("output/evolution_dispersal.png", p3, width = 8, height = 6)
ggsave("output/evolution_GtimeVsEvents.png", p4, width = 8, height = 6)
ggsave("output/evolution_TotalAdults.png", p5, width = 8, height = 6)
ggsave("output/evoltion_NestWisePopulation.png", p6, width = 8, height = 6)
