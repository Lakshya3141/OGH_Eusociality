)
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting <- as.data.frame(data_plotting) # make a data frame
p <- ggplot(data_plotting, aes(x=V1, y=V2)) +
geom_tile() +
labs(y = "Larval signals", x = "Body size") +
guides(fill=guide_legend(title="Foraging probability", reverse = TRUE)) +
scale_fill_gradientn(colours=rev(met.brewer("Greek", 100))) +
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
legend.position = "none",
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linewidth=0.5)
)
p
View(basis)
condition
replic
print(paste(condition, " : ", replic))
folder <- mapping$X[mapping$condition == condition & mapping$rp == replic]
basis_pattern <- "_basis.csv"
basis_files <- list.files(path = paste0("./", folder), pattern = basis_pattern, full.names = TRUE)
# Check if files are found
if (length(basis_files) > 0) {
# Read the first file (assuming only one file matches the pattern)
basis <- data.frame(read.csv(basis_files[1], header = FALSE))
basis <- basis[,-6]
}
rep_subset <- subset_data[subset_data$rep == replic, ]
betas <- rep_subset %>% dplyr::select(beta1, beta2, beta3, beta4, beta5) # select gene values 1-5, which are the gene values for the larval reaction norm
time <- Sys.time() # record system time
set.seed(time) # use time to seed the rng
number_larvae <- length(unique(rep_subset$ind_id))
if (number_larvae > 100) {
number_larvae <- 100
}
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
color_value <- colors_vector[replic]
dummy <- as.data.frame(mat_results)
View(data_plotting)
p <- ggplot(data_plotting, aes(x=V1, y=V2, fill=y_mean)) +
geom_tile() +
labs(y = "Foraging propensity", x = "Num Larvae") +
guides(fill=guide_legend(title="Foraging probability", reverse = TRUE)) +
scale_fill_gradientn(colours=rev(met.brewer("Greek", 100))) +
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
legend.position = "none",
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linewidth=0.5)
)
}
p <- ggplot(data_plotting, aes(x=larval_level,y=V2,group=V3)) +
stat_summary(aes(x=nutrition_level,y=V2,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Larval signal", limits = c(0.0, 3.5), breaks = seq(0.0, 3.5, 0.5))+
scale_x_continuous(name="Nutrition level",limits = c(0.0, 5.0), breaks = seq(0.0,5.0,1.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
p <- ggplot(data_plotting, aes(x=larval_level,y=V2,group=V3)) +
stat_summary(aes(x=larval_level,y=V2,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Larval signal", limits = c(0.0, 3.5), breaks = seq(0.0, 3.5, 0.5))+
scale_x_continuous(name="Nutrition level",limits = c(0.0, 5.0), breaks = seq(0.0,5.0,1.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
View(basis)
View(data_plotting)
p <- ggplot(data_plotting, aes(x=larval_level,y=V2,group=V3)) +
stat_summary(aes(x=larval_level,y=V2,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging propensity", limits = c(0.0, 1.0), breaks = seq(0.0, 3.5, 0.5))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,5.0,1.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
View(data_plotting)
valid_conditions <- c(valid_conditions, condition)
subset_data <- all_individuals[all_individuals$cond == condition, ]
##### Reaction norms #####
p <- ggplot() +
labs(title = paste0("Evolved reaction norm"), x = "Number of Larvae", y = "Prob foraging choice") +
theme_minimal() +
theme(legend.position = "none") +
ylim(0, 1.1) +
theme_minimal() +
theme(legend.position = "top") +
# scale_color_manual(values = replicate_colors) +  # Set custom colors for replicates
guides(color = guide_legend(title = "Rep"),
fill = guide_legend(override.aes = list(color = NULL)))  # Remove fill from the legend
print(paste(condition, " : ", replic))
folder <- mapping$X[mapping$condition == condition & mapping$rp == replic]
basis_pattern <- "_basis.csv"
basis_files <- list.files(path = paste0("./", folder), pattern = basis_pattern, full.names = TRUE)
# Check if files are found
if (length(basis_files) > 0) {
# Read the first file (assuming only one file matches the pattern)
basis <- data.frame(read.csv(basis_files[1], header = FALSE))
basis <- basis[,-6]
}
rep_subset <- subset_data[subset_data$rep == replic, ]
betas <- rep_subset %>% dplyr::select(beta1, beta2, beta3, beta4, beta5) # select gene values 1-5, which are the gene values for the larval reaction norm
time <- Sys.time() # record system time
set.seed(time) # use time to seed the rng
number_larvae <- length(unique(rep_subset$ind_id))
if (number_larvae > 100) {
number_larvae <- 100
}
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis_matrix_larvae[i - ((i - 1) %/% nrow(basis_matrix_larvae) * nrow(basis_matrix_larvae)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
print(paste(condition, " : ", replic))
folder <- mapping$X[mapping$condition == condition & mapping$rp == replic]
basis_pattern <- "_basis.csv"
basis_files <- list.files(path = paste0("./", folder), pattern = basis_pattern, full.names = TRUE)
# Check if files are found
if (length(basis_files) > 0) {
# Read the first file (assuming only one file matches the pattern)
basis <- data.frame(read.csv(basis_files[1], header = FALSE))
basis <- basis[,-6]
}
rep_subset <- subset_data[subset_data$rep == replic, ]
betas <- rep_subset %>% dplyr::select(beta1, beta2, beta3, beta4, beta5) # select gene values 1-5, which are the gene values for the larval reaction norm
time <- Sys.time() # record system time
set.seed(time) # use time to seed the rng
number_larvae <- length(unique(rep_subset$ind_id))
if (number_larvae > 100) {
number_larvae <- 100
}
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
color_value <- colors_vector[replic]
p <- ggplot(data_plotting, aes(x=larval_level,y=V2,group=V3)) +
stat_summary(aes(x=larval_level,y=V2,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging propensity", limits = c(0.0, 1.0), breaks = seq(0.0, 3.5, 0.5))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,5.0,1.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
p <- ggplot(data_plotting, aes(x=larval_level,y=V2,group=V3)) +
stat_summary(aes(x=larval_level,y=V2,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging propensity", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
View(data_plotting)
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
stat_summary(data_plotting)
View(data_plotting)
larval_level
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3)
)
View(data_plotting)
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
dummy <- as.data.frame(mat_results)
View(dummy)
dim(mat_results)
upper_loop_limit
number_larvae <- 10
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
dummy <- as.data.frame(mat_results)
print(paste(condition, " : ", replic))
folder <- mapping$X[mapping$condition == condition & mapping$rp == replic]
basis_pattern <- "_basis.csv"
basis_files <- list.files(path = paste0("./", folder), pattern = basis_pattern, full.names = TRUE)
# Check if files are found
if (length(basis_files) > 0) {
# Read the first file (assuming only one file matches the pattern)
basis <- data.frame(read.csv(basis_files[1], header = FALSE))
basis <- basis[,-6]
}
rep_subset <- subset_data[subset_data$rep == replic, ]
betas <- rep_subset %>% dplyr::select(beta1, beta2, beta3, beta4, beta5) # select gene values 1-5, which are the gene values for the larval reaction norm
time <- Sys.time() # record system time
set.seed(time) # use time to seed the rng
number_larvae <- length(unique(rep_subset$ind_id))
if (number_larvae > 100) {
number_larvae <- 100
}
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# number_larvae <- 10
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
number_larvae
print(paste(condition, " : ", replic))
folder <- mapping$X[mapping$condition == condition & mapping$rp == replic]
basis_pattern <- "_basis.csv"
basis_files <- list.files(path = paste0("./", folder), pattern = basis_pattern, full.names = TRUE)
# Check if files are found
if (length(basis_files) > 0) {
# Read the first file (assuming only one file matches the pattern)
basis <- data.frame(read.csv(basis_files[1], header = FALSE))
basis <- basis[,-6]
}
rep_subset <- subset_data[subset_data$rep == replic, ]
betas <- rep_subset %>% dplyr::select(beta1, beta2, beta3, beta4, beta5) # select gene values 1-5, which are the gene values for the larval reaction norm
time <- Sys.time() # record system time
set.seed(time) # use time to seed the rng
number_larvae <- length(unique(rep_subset$ind_id))
if (number_larvae > 100) {
number_larvae <- 100
}
number_larvae <- 25
subset_betas <- betas[sample(nrow(betas), number_larvae), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# number_larvae <- 10
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i + number_larvae) %/% number_larvae, ]))
# record an id for the larvae
mat_results[i,2] <- (i + number_larvae) %/% number_larvae
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
dummy <- as.data.frame(mat_results)
basis
larval_level
data_plotting
(i + number_larvae) %/% number_larvae
i
i<-1
(i + number_larvae) %/% number_larvae
number_larvae <- 25
subset_betas <- betas[sample(nrow(betas), number_larvae, replace = FALSE), ] # sample random 100 larvae
mat_results <- matrix(NA, ncol = 2, nrow = nrow(basis) * number_larvae)
# number_larvae <- 10
# evaluate spline
upper_loop_limit <- nrow(basis) * number_larvae
for (i in c(1:upper_loop_limit)) {
# multiply each of the rows of the basis matrix with the betas (gene values) as a column vector
# this occurs first by the 100 different nutrition levels that have been precalculated
# and then by the different larvae
mat_results[i,1] <- as.matrix(basis[i - ((i - 1) %/% nrow(basis) * nrow(basis)), ]) %*% t(as.matrix(subset_betas[(i - 1 + nrow(basis)) %/% nrow(basis), ]))
# record an id for the larvae
mat_results[i,2] <- (i - 1 + nrow(basis)) %/% nrow(basis)
}
larval_level <- rep(basis$V2, number_larvae) # predetermined steps of x (nutrition level) to the data frame. this can be read from X0 of the basis matrix
data_plotting <- cbind(larval_level, mat_results) # combine these nutrition levels with the spline evaluation
data_plotting <- as.data.frame(data_plotting) # make a data frame
data_plotting$logistic_vals <- 1/(1+exp(data_plotting$V2))
color_value <- colors_vector[replic]
data_plotting$V3 <- as.factor(data_plotting$V3)
p <- ggplot(data_plotting, aes(x=larval_level,y=logistic_vals,group=V3)) +
stat_summary(aes(x=larval_level,y=logistic_vals,group=V3),fun=mean,geom="line",linewidth=1.5,alpha=0.8, col = "grey")+
scale_y_continuous(name="Foraging probability", limits = c(0.0, 1.0), breaks = seq(0.0, 1.0, 0.2))+
scale_x_continuous(name="Larval levels",limits = c(0.0, 500.0), breaks = seq(0.0,500.0,50.0))+
theme_minimal() +
theme(
axis.text = element_text(size=11,face="plain",color="black"),
axis.title = element_text(size = 13),
axis.line = element_line(color="black", linewidth = 0.6),
panel.border = element_rect(colour = "darkgray", fill=NA, linetype=0.5)
)
p
source("C:/Users/laksh/Downloads/OGH_Eusociality/RunDATANew/20241501_JRun11_ConfirmJobWorking/dummy_betaValImaging.R")
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(gridExtra)
library(patchwork)
library(diptest)
library(MetBrewer)
# Step 1: Classifying data
mapping <- read.csv("mapping_condition.csv")
conditions_to_compare <- c("lb_lf", "mb_lf")  # Add the conditions you want to compare
#### Last of US data graphs ####
combined_data <- data.frame()
for (dum in seq(1:dim(mapping)[1])) {
folder <- mapping$X[dum]
condition <- mapping$condition[mapping$X == folder]
# Check if condition is not NA
if (mapping$lou[dum] && (condition %in% conditions_to_compare)) {
# Generate file name pattern
file_pattern <- "_LastOfUs.csv"
# List files in the folder
files <- list.files(path = paste0("./", folder), pattern = file_pattern, full.names = TRUE)
# Check if files are found
if (length(files) > 0) {
# Read the first file (assuming only one file matches the pattern)
data <- read.csv(files[1])
data$rep <- mapping$rp[mapping$X == folder]
data$cond <- condition
# Combine with previous data or create a new dataset
if (exists("combined_data")) {
combined_data <- rbind(combined_data, data)
} else {
combined_data <- data
}
}
}
}
# Subset dead individuals (t_death != -1)
dead_individuals <- combined_data[combined_data$t_death != -1, ]
alive_individuals <- combined_data[combined_data$t_death == -1, ]
# Subset alive individuals (keep the row with the largest gtime)
alive_individuals <- alive_individuals[!duplicated(alive_individuals$ind_id, fromLast = TRUE), ]
alive_individuals <- alive_individuals[!(alive_individuals$ind_id %in% unique(dead_individuals$ind_id)), ]
# Combine the subsets if needed
all_individuals <- rbind(dead_individuals, alive_individuals)
valid_conditions <- c()
num_nests_lou <- 25
# Create a list to store plots for each condition
plots_reactionNorms <- list()
source("C:/Users/laksh/Downloads/OGH_Eusociality/RunDATANew/20241501_JRun11_ConfirmJobWorking/dummy_betaValImaging.R")
plots_reactionNorms
